{"version":3,"sources":["Menu.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["TabPanel","props","children","value","index","other","Typography","component","role","hidden","id","aria-labelledby","Box","p","a11yProps","useStyles","makeStyles","theme","root","flexGrow","backgroundColor","palette","background","paper","addButton","color","createMuiTheme","primary","cyan","secondary","main","contrastText","SimpleTabs","classes","React","useState","setValue","anchorEl","setAnchorEl","handleClose","ThemeProvider","className","AppBar","position","Tabs","onChange","event","newValue","aria-label","Tab","label","Button","aria-controls","aria-haspopup","onClick","currentTarget","style","maxWidth","maxHeight","minWidth","minHeight","Menu","getContentAnchorEl","anchorOrigin","vertical","horizontal","transformOrigin","keepMounted","open","Boolean","onClose","TransitionComponent","Fade","MenuItem","App","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2cd7ee41.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport Typography from '@material-ui/core/Typography';\nimport Box from '@material-ui/core/Box';\nimport { createMuiTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport cyan from '@material-ui/core/colors/cyan';\nimport Button from '@material-ui/core/Button';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport ArrowDropDownIcon from \"@material-ui/icons/ArrowDropDown\";\nimport {Popover} from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport Fade from '@material-ui/core/Fade';\nimport { positions } from '@material-ui/system';\n\ninterface TabPanelProps {\n  children?: React.ReactNode;\n  index: any;\n  value: any;\n}\n\nfunction TabPanel(props: TabPanelProps) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n}\n\nfunction a11yProps(index: any) {\n  return {\n    id: `simple-tab-${index}`,\n    'aria-controls': `simple-tabpanel-${index}`,\n  };\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      flexGrow: 1,\n      backgroundColor: theme.palette.background.paper\n    },\n    addButton: {\n      color: \"white\"\n    }\n}));\n  \n\nconst theme = createMuiTheme({\n    palette: {\n      primary: cyan,\n      secondary: {\n        main: '#fafafa',\n        contrastText: '#424242',\n      },\n    },\n});\n\nexport default function SimpleTabs() {\n  const classes = useStyles();\n  const [value, setValue] = React.useState(0);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement | SVGSVGElement>(null);\n\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <ThemeProvider theme={theme}>\n        <div className={classes.root}>\n        <AppBar position=\"static\">\n            <Tabs value={value} onChange={handleChange} aria-label=\"simple tabs example\" color=\"primary\">\n                <Tab color= \"secondary\" label=\"Welcome\" {...a11yProps(0)} />\n                <Tab color= \"secondary\" label=\"Galery\" {...a11yProps(1)} />\n                <Tab color= \"secondary\" label=\"Login\" {...a11yProps(2)} />\n                <Tab color= \"secondary\" label=\"Register\" {...a11yProps(3)} />\n                <div>\n                <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}\n                style={{maxWidth: '160px', maxHeight: '70px', minWidth: '160px', minHeight: '70px', color: '#424242'}}>\n                    <AddIcon color=\"secondary\" />\n                        Events\n                </Button>\n\n                <Menu\n                    id=\"fade-menu\"\n                    anchorEl={anchorEl}\n                    getContentAnchorEl={null}\n                    anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\n                    transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\n                    keepMounted\n                    open={Boolean(anchorEl)}\n                    onClose={handleClose}\n                    TransitionComponent={Fade}\n                >\n                    <MenuItem onClick={handleClose}>Profile</MenuItem>\n                    <MenuItem onClick={handleClose}>My account</MenuItem>\n                    <MenuItem onClick={handleClose}>Logout</MenuItem>\n                </Menu>\n                </div>\n            </Tabs>\n        </AppBar>\n        <TabPanel value={value} index={0}>\n            Homepage\n        </TabPanel>\n        <TabPanel value={value} index={1}>\n            Events coming soon...\n        </TabPanel>\n        <TabPanel value={value} index={2}>\n            Photos coming soon...\n        </TabPanel>\n        </div>\n    </ThemeProvider>\n  );\n}","import React from 'react';\nimport './App.css';\nimport SimpleTabs from './Menu';\n\nfunction App() {\n  return (\n    <div>\n      <SimpleTabs/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}